{"/home/travis/build/npmtest/node-npmtest-geolib/test.js":"/* istanbul instrument in package npmtest_geolib */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-geolib/lib.npmtest_geolib.js":"/* istanbul instrument in package npmtest_geolib */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_geolib = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_geolib = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-geolib/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-geolib && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_geolib */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_geolib\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_geolib.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_geolib.rollup.js'] =\n            local.assetsDict['/assets.npmtest_geolib.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_geolib.__dirname +\n                    '/lib.npmtest_geolib.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-geolib/geolib/dist/geolib.js":"/*! geolib 2.0.21 by Manuel Bieh\r\n* Library to provide geo functions like distance calculation,\r\n* conversion of decimal coordinates to sexagesimal and vice versa, etc.\r\n* WGS 84 (World Geodetic System 1984)\r\n* \r\n* @author Manuel Bieh\r\n* @url http://www.manuelbieh.com/\r\n* @version 2.0.21\r\n* @license MIT \r\n**/;(function(global, undefined) {\n\n    \"use strict\";\n\n    function Geolib() {}\n\n    // Constants\n    Geolib.TO_RAD = Math.PI / 180;\n    Geolib.TO_DEG = 180 / Math.PI;\n    Geolib.PI_X2 = Math.PI * 2;\n    Geolib.PI_DIV4 = Math.PI / 4;\n\n    // Setting readonly defaults\n    var geolib = Object.create(Geolib.prototype, {\n        version: {\n            value: \"2.0.21\"\n        },\n        radius: {\n            value: 6378137\n        },\n        minLat: {\n            value: -90\n        },\n        maxLat: {\n            value: 90\n        },\n        minLon: {\n            value: -180\n        },\n        maxLon: {\n            value: 180\n        },\n        sexagesimalPattern: {\n            value: /^([0-9]{1,3})°\\s*([0-9]{1,3}(?:\\.(?:[0-9]{1,2}))?)'\\s*(([0-9]{1,3}(\\.([0-9]{1,4}))?)\"\\s*)?([NEOSW]?)$/\n        },\n        measures: {\n            value: Object.create(Object.prototype, {\n                \"m\" : {value: 1},\n                \"km\": {value: 0.001},\n                \"cm\": {value: 100},\n                \"mm\": {value: 1000},\n                \"mi\": {value: (1 / 1609.344)},\n                \"sm\": {value: (1 / 1852.216)},\n                \"ft\": {value: (100 / 30.48)},\n                \"in\": {value: (100 / 2.54)},\n                \"yd\": {value: (1 / 0.9144)}\n            })\n        },\n        prototype: {\n            value: Geolib.prototype\n        },\n        extend: {\n            value: function(methods, overwrite) {\n                for(var prop in methods) {\n                    if(typeof geolib.prototype[prop] === 'undefined' || overwrite === true) {\n                        if(typeof methods[prop] === 'function' && typeof methods[prop].bind === 'function') {\n                            geolib.prototype[prop] = methods[prop].bind(geolib);\n                        } else {\n                            geolib.prototype[prop] = methods[prop];\n                        }\n                    }\n                }\n            }\n        }\n    });\n\n    if (typeof(Number.prototype.toRad) === 'undefined') {\n        Number.prototype.toRad = function() {\n            return this * Geolib.TO_RAD;\n        };\n    }\n\n    if (typeof(Number.prototype.toDeg) === 'undefined') {\n        Number.prototype.toDeg = function() {\n            return this * Geolib.TO_DEG;\n        };\n    }\n\n    // Here comes the magic\n    geolib.extend({\n\n        decimal: {},\n\n        sexagesimal: {},\n\n        distance: null,\n\n        getKeys: function(point) {\n\n            // GeoJSON Array [longitude, latitude(, elevation)]\n            if(Object.prototype.toString.call(point) == '[object Array]') {\n\n                return {\n                    longitude: point.length >= 1 ? 0 : undefined,\n                    latitude: point.length >= 2 ? 1 : undefined,\n                    elevation: point.length >= 3 ? 2 : undefined\n                };\n\n            }\n\n            var getKey = function(possibleValues) {\n\n                var key;\n\n                possibleValues.every(function(val) {\n                    // TODO: check if point is an object\n                    if(typeof point != 'object') {\n                        return true;\n                    }\n                    return point.hasOwnProperty(val) ? (function() { key = val; return false; }()) : true;\n                });\n\n                return key;\n\n            };\n\n            var longitude = getKey(['lng', 'lon', 'longitude']);\n            var latitude = getKey(['lat', 'latitude']);\n            var elevation = getKey(['alt', 'altitude', 'elevation', 'elev']);\n\n            // return undefined if not at least one valid property was found\n            if(typeof latitude == 'undefined' &&\n                typeof longitude == 'undefined' &&\n                typeof elevation == 'undefined') {\n                return undefined;\n            }\n\n            return {\n                latitude: latitude,\n                longitude: longitude,\n                elevation: elevation\n            };\n\n        },\n\n        // returns latitude of a given point, converted to decimal\n        // set raw to true to avoid conversion\n        getLat: function(point, raw) {\n            return raw === true ? point[this.getKeys(point).latitude] : this.useDecimal(point[this.getKeys(point).latitude]);\n        },\n\n        // Alias for getLat\n        latitude: function(point) {\n            return this.getLat.call(this, point);\n        },\n\n        // returns longitude of a given point, converted to decimal\n        // set raw to true to avoid conversion\n        getLon: function(point, raw) {\n            return raw === true ? point[this.getKeys(point).longitude] : this.useDecimal(point[this.getKeys(point).longitude]);\n        },\n\n        // Alias for getLon\n        longitude: function(point) {\n            return this.getLon.call(this, point);\n        },\n\n        getElev: function(point) {\n            return point[this.getKeys(point).elevation];\n        },\n\n        // Alias for getElev\n        elevation: function(point) {\n            return this.getElev.call(this, point);\n        },\n\n        coords: function(point, raw) {\n\n            var retval = {\n                latitude: raw === true ? point[this.getKeys(point).latitude] : this.useDecimal(point[this.getKeys(point).latitude]),\n                longitude: raw === true ? point[this.getKeys(point).longitude] : this.useDecimal(point[this.getKeys(point).longitude])\n            };\n\n            var elev = point[this.getKeys(point).elevation];\n\n            if(typeof elev !== 'undefined') {\n                retval['elevation'] = elev;\n            }\n\n            return retval;\n\n        },\n\n        // Alias for coords\n        ll: function(point, raw) {\n            return this.coords.call(this, point, raw);\n        },\n\n\n        // checks if a variable contains a valid latlong object\n        validate: function(point) {\n\n            var keys = this.getKeys(point);\n\n            if(typeof keys === 'undefined' || typeof keys.latitude === 'undefined' || keys.longitude === 'undefined') {\n                return false;\n            }\n\n            var lat = point[keys.latitude];\n            var lng = point[keys.longitude];\n\n            if(typeof lat === 'undefined' || !this.isDecimal(lat) && !this.isSexagesimal(lat)) {\n                return false;\n            }\n\n            if(typeof lng === 'undefined' || !this.isDecimal(lng) && !this.isSexagesimal(lng)) {\n                return false;\n            }\n\n            lat = this.useDecimal(lat);\n            lng = this.useDecimal(lng);\n\n            if(lat < this.minLat || lat > this.maxLat || lng < this.minLon || lng > this.maxLon) {\n                return false;\n            }\n\n            return true;\n\n        },\n\n        /**\n        * Calculates geodetic distance between two points specified by latitude/longitude using\n        * Vincenty inverse formula for ellipsoids\n        * Vincenty Inverse Solution of Geodesics on the Ellipsoid (c) Chris Veness 2002-2010\n        * (Licensed under CC BY 3.0)\n        *\n        * @param    object    Start position {latitude: 123, longitude: 123}\n        * @param    object    End position {latitude: 123, longitude: 123}\n        * @param    integer   Accuracy (in meters)\n        * @param    integer   Precision (in decimal cases)\n        * @return   integer   Distance (in meters)\n        */\n        getDistance: function(start, end, accuracy, precision) {\n\n            accuracy = Math.floor(accuracy) || 1;\n            precision = Math.floor(precision) || 0;\n\n            var s = this.coords(start);\n            var e = this.coords(end);\n\n            var a = 6378137, b = 6356752.314245,  f = 1/298.257223563;  // WGS-84 ellipsoid params\n            var L = (e['longitude']-s['longitude']).toRad();\n\n            var cosSigma, sigma, sinAlpha, cosSqAlpha, cos2SigmaM, sinSigma;\n\n            var U1 = Math.atan((1-f) * Math.tan(parseFloat(s['latitude']).toRad()));\n            var U2 = Math.atan((1-f) * Math.tan(parseFloat(e['latitude']).toRad()));\n            var sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);\n            var sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);\n\n            var lambda = L, lambdaP, iterLimit = 100;\n            do {\n                var sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);\n                sinSigma = (\n                    Math.sqrt(\n                        (\n                            cosU2 * sinLambda\n                        ) * (\n                            cosU2 * sinLambda\n                        ) + (\n                            cosU1 * sinU2 - sinU1 * cosU2 * cosLambda\n                        ) * (\n                            cosU1 * sinU2 - sinU1 * cosU2 * cosLambda\n                        )\n                    )\n                );\n                if (sinSigma === 0) {\n                    return geolib.distance = 0;  // co-incident points\n                }\n\n                cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;\n                sigma = Math.atan2(sinSigma, cosSigma);\n                sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;\n                cosSqAlpha = 1 - sinAlpha * sinAlpha;\n                cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;\n\n                if (isNaN(cos2SigmaM)) {\n                    cos2SigmaM = 0;  // equatorial line: cosSqAlpha=0 (§6)\n                }\n                var C = (\n                    f / 16 * cosSqAlpha * (\n                        4 + f * (\n                            4 - 3 * cosSqAlpha\n                        )\n                    )\n                );\n                lambdaP = lambda;\n                lambda = (\n                    L + (\n                        1 - C\n                    ) * f * sinAlpha * (\n                        sigma + C * sinSigma * (\n                            cos2SigmaM + C * cosSigma * (\n                                -1 + 2 * cos2SigmaM * cos2SigmaM\n                            )\n                        )\n                    )\n                );\n\n            } while (Math.abs(lambda-lambdaP) > 1e-12 && --iterLimit>0);\n\n            if (iterLimit === 0) {\n                return NaN;  // formula failed to converge\n            }\n\n            var uSq = (\n                cosSqAlpha * (\n                    a * a - b * b\n                ) / (\n                    b*b\n                )\n            );\n\n            var A = (\n                1 + uSq / 16384 * (\n                    4096 + uSq * (\n                        -768 + uSq * (\n                            320 - 175 * uSq\n                        )\n                    )\n                )\n            );\n\n            var B = (\n                uSq / 1024 * (\n                    256 + uSq * (\n                        -128 + uSq * (\n                            74-47 * uSq\n                        )\n                    )\n                )\n            );\n\n            var deltaSigma = (\n                B * sinSigma * (\n                    cos2SigmaM + B / 4 * (\n                        cosSigma * (\n                            -1 + 2 * cos2SigmaM * cos2SigmaM\n                        ) -B / 6 * cos2SigmaM * (\n                            -3 + 4 * sinSigma * sinSigma\n                        ) * (\n                            -3 + 4 * cos2SigmaM * cos2SigmaM\n                        )\n                    )\n                )\n            );\n\n            var distance = b * A * (sigma - deltaSigma);\n\n            distance = distance.toFixed(precision); // round to 1mm precision\n\n            //if (start.hasOwnProperty(elevation) && end.hasOwnProperty(elevation)) {\n            if (typeof this.elevation(start) !== 'undefined' && typeof this.elevation(end) !== 'undefined') {\n                var climb = Math.abs(this.elevation(start) - this.elevation(end));\n                distance = Math.sqrt(distance * distance + climb * climb);\n            }\n\n            return this.distance = Math.round(distance * Math.pow(10, precision) / accuracy) * accuracy / Math.pow(10, precision);\n\n            /*\n            // note: to return initial/final bearings in addition to distance, use something like:\n            var fwdAz = Math.atan2(cosU2*sinLambda,  cosU1*sinU2-sinU1*cosU2*cosLambda);\n            var revAz = Math.atan2(cosU1*sinLambda, -sinU1*cosU2+cosU1*sinU2*cosLambda);\n\n            return { distance: s, initialBearing: fwdAz.toDeg(), finalBearing: revAz.toDeg() };\n            */\n\n        },\n\n\n        /**\n        * Calculates the distance between two spots.\n        * This method is more simple but also far more inaccurate\n        *\n        * @param    object    Start position {latitude: 123, longitude: 123}\n        * @param    object    End position {latitude: 123, longitude: 123}\n        * @param    integer   Accuracy (in meters)\n        * @return   integer   Distance (in meters)\n        */\n        getDistanceSimple: function(start, end, accuracy) {\n\n            accuracy = Math.floor(accuracy) || 1;\n\n            var distance =\n                Math.round(\n                    Math.acos(\n                        Math.sin(\n                            this.latitude(end).toRad()\n                        ) *\n                        Math.sin(\n                            this.latitude(start).toRad()\n                        ) +\n                        Math.cos(\n                            this.latitude(end).toRad()\n                        ) *\n                        Math.cos(\n                            this.latitude(start).toRad()\n                        ) *\n                        Math.cos(\n                            this.longitude(start).toRad() - this.longitude(end).toRad()\n                        )\n                    ) * this.radius\n                );\n\n            return geolib.distance = Math.floor(Math.round(distance/accuracy)*accuracy);\n\n        },\n\n\n    /**\n        * Calculates the center of a collection of geo coordinates\n        *\n        * @param        array       Collection of coords [{latitude: 51.510, longitude: 7.1321}, {latitude: 49.1238, longitude: \"8° 30' W\"}, ...]\n        * @return       object      {latitude: centerLat, longitude: centerLng}\n        */\n        getCenter: function(coords) {\n\n            var coordsArray = coords;\n            if(typeof coords === 'object' && !(coords instanceof Array)) {\n\n                coordsArray = [];\n\n                for(var key in coords) {\n                    coordsArray.push(\n                        this.coords(coords[key])\n                    );\n                }\n\n            }\n\n            if(!coordsArray.length) {\n                return false;\n            }\n\n            var X = 0.0;\n            var Y = 0.0;\n            var Z = 0.0;\n            var lat, lon, hyp;\n\n            coordsArray.forEach(function(coord) {\n\n                lat = this.latitude(coord).toRad();\n                lon = this.longitude(coord).toRad();\n\n                X += Math.cos(lat) * Math.cos(lon);\n                Y += Math.cos(lat) * Math.sin(lon);\n                Z += Math.sin(lat);\n\n            }, this);\n\n            var nb_coords = coordsArray.length;\n            X = X / nb_coords;\n            Y = Y / nb_coords;\n            Z = Z / nb_coords;\n\n            lon = Math.atan2(Y, X);\n            hyp = Math.sqrt(X * X + Y * Y);\n            lat = Math.atan2(Z, hyp);\n\n            return {\n                latitude: (lat * Geolib.TO_DEG).toFixed(6),\n                longitude: (lon * Geolib.TO_DEG).toFixed(6)\n            };\n\n        },\n\n\n        /**\n        * Gets the max and min, latitude, longitude, and elevation (if provided).\n        * @param        array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return   object      {maxLat: maxLat,\n        *                     minLat: minLat\n        *                     maxLng: maxLng,\n        *                     minLng: minLng,\n        *                     maxElev: maxElev,\n        *                     minElev: minElev}\n        */\n        getBounds: function(coords) {\n\n            if (!coords.length) {\n                return false;\n            }\n\n            var useElevation = this.elevation(coords[0]);\n\n            var stats = {\n                maxLat: -Infinity,\n                minLat: Infinity,\n                maxLng: -Infinity,\n                minLng: Infinity\n            };\n\n            if (typeof useElevation != 'undefined') {\n                stats.maxElev = 0;\n                stats.minElev = Infinity;\n            }\n\n            for (var i = 0, l = coords.length; i < l; ++i) {\n\n                stats.maxLat = Math.max(this.latitude(coords[i]), stats.maxLat);\n                stats.minLat = Math.min(this.latitude(coords[i]), stats.minLat);\n                stats.maxLng = Math.max(this.longitude(coords[i]), stats.maxLng);\n                stats.minLng = Math.min(this.longitude(coords[i]), stats.minLng);\n\n                if (useElevation) {\n                    stats.maxElev = Math.max(this.elevation(coords[i]), stats.maxElev);\n                    stats.minElev = Math.min(this.elevation(coords[i]), stats.minElev);\n                }\n\n            }\n\n            return stats;\n\n        },\n\n        /**\n        * Calculates the center of the bounds of geo coordinates.\n        *\n        * On polygons like political borders (eg. states)\n        * this may gives a closer result to human expectation, than `getCenter`,\n        * because that function can be disturbed by uneven distribution of\n        * point in different sides.\n        * Imagine the US state Oklahoma: `getCenter` on that gives a southern\n        * point, because the southern border contains a lot more nodes,\n        * than the others.\n        *\n        * @param        array       Collection of coords [{latitude: 51.510, longitude: 7.1321}, {latitude: 49.1238, longitude: \"8° 30' W\"}, ...]\n        * @return       object      {latitude: centerLat, longitude: centerLng}\n        */\n        getCenterOfBounds: function(coords) {\n            var b = this.getBounds(coords);\n            var latitude = b.minLat + ((b.maxLat - b.minLat) / 2);\n            var longitude = b.minLng + ((b.maxLng - b.minLng) / 2);\n            return {\n                latitude: parseFloat(latitude.toFixed(6)),\n                longitude: parseFloat(longitude.toFixed(6))\n            };\n        },\n\n\n        /**\n        * Computes the bounding coordinates of all points on the surface\n        * of the earth less than or equal to the specified great circle\n        * distance.\n        *\n        * @param object Point position {latitude: 123, longitude: 123}\n        * @param number Distance (in meters).\n        * @return array Collection of two points defining the SW and NE corners.\n        */\n        getBoundsOfDistance: function(point, distance) {\n\n            var latitude = this.latitude(point);\n            var longitude = this.longitude(point);\n\n            var radLat = latitude.toRad();\n            var radLon = longitude.toRad();\n\n            var radDist = distance / this.radius;\n            var minLat = radLat - radDist;\n            var maxLat = radLat + radDist;\n\n            var MAX_LAT_RAD = this.maxLat.toRad();\n            var MIN_LAT_RAD = this.minLat.toRad();\n            var MAX_LON_RAD = this.maxLon.toRad();\n            var MIN_LON_RAD = this.minLon.toRad();\n\n            var minLon;\n            var maxLon;\n\n            if (minLat > MIN_LAT_RAD && maxLat < MAX_LAT_RAD) {\n\n                var deltaLon = Math.asin(Math.sin(radDist) / Math.cos(radLat));\n                minLon = radLon - deltaLon;\n\n                if (minLon < MIN_LON_RAD) {\n                    minLon += Geolib.PI_X2;\n                }\n\n                maxLon = radLon + deltaLon;\n\n                if (maxLon > MAX_LON_RAD) {\n                    maxLon -= Geolib.PI_X2;\n                }\n\n            } else {\n                // A pole is within the distance.\n                minLat = Math.max(minLat, MIN_LAT_RAD);\n                maxLat = Math.min(maxLat, MAX_LAT_RAD);\n                minLon = MIN_LON_RAD;\n                maxLon = MAX_LON_RAD;\n            }\n\n            return [\n                // Southwest\n                {\n                    latitude: minLat.toDeg(),\n                    longitude: minLon.toDeg()\n                },\n                // Northeast\n                {\n                    latitude: maxLat.toDeg(),\n                    longitude: maxLon.toDeg()\n                }\n            ];\n\n        },\n\n\n        /**\n        * Checks whether a point is inside of a polygon or not.\n        * Note that the polygon coords must be in correct order!\n        *\n        * @param        object      coordinate to check e.g. {latitude: 51.5023, longitude: 7.3815}\n        * @param        array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return       bool        true if the coordinate is inside the given polygon\n        */\n        isPointInside: function(latlng, coords) {\n\n            for(var c = false, i = -1, l = coords.length, j = l - 1; ++i < l; j = i) {\n\n                if(\n                    (\n                        (this.longitude(coords[i]) <= this.longitude(latlng) && this.longitude(latlng) < this.longitude(coords[j])) ||\n                        (this.longitude(coords[j]) <= this.longitude(latlng) && this.longitude(latlng) < this.longitude(coords[i]))\n                    ) &&\n                    (\n                        this.latitude(latlng) < (this.latitude(coords[j]) - this.latitude(coords[i])) *\n                        (this.longitude(latlng) - this.longitude(coords[i])) /\n                        (this.longitude(coords[j]) - this.longitude(coords[i])) +\n                        this.latitude(coords[i])\n                    )\n                ) {\n                    c = !c;\n                }\n\n            }\n\n            return c;\n\n        },\n\n\n       /**\n        * Pre calculate the polygon coords, to speed up the point inside check.\n        * Use this function before calling isPointInsideWithPreparedPolygon()\n        * @see          Algorythm from http://alienryderflex.com/polygon/\n        * @param        array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        */\n        preparePolygonForIsPointInsideOptimized: function(coords) {\n\n            for(var i = 0, j = coords.length-1; i < coords.length; i++) {\n\n            if(this.longitude(coords[j]) === this.longitude(coords[i])) {\n\n                    coords[i].constant = this.latitude(coords[i]);\n                    coords[i].multiple = 0;\n\n                } else {\n\n                    coords[i].constant = this.latitude(coords[i]) - (\n                        this.longitude(coords[i]) * this.latitude(coords[j])\n                    ) / (\n                        this.longitude(coords[j]) - this.longitude(coords[i])\n                    ) + (\n                        this.longitude(coords[i])*this.latitude(coords[i])\n                    ) / (\n                        this.longitude(coords[j])-this.longitude(coords[i])\n                    );\n\n                    coords[i].multiple = (\n                        this.latitude(coords[j])-this.latitude(coords[i])\n                    ) / (\n                        this.longitude(coords[j])-this.longitude(coords[i])\n                    );\n\n                }\n\n                j=i;\n\n            }\n\n        },\n\n      /**\n       * Checks whether a point is inside of a polygon or not.\n       * \"This is useful if you have many points that need to be tested against the same (static) polygon.\"\n       * Please call the function preparePolygonForIsPointInsideOptimized() with the same coords object before using this function.\n       * Note that the polygon coords must be in correct order!\n       *\n       * @see          Algorythm from http://alienryderflex.com/polygon/\n       *\n       * @param     object      coordinate to check e.g. {latitude: 51.5023, longitude: 7.3815}\n       * @param     array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n       * @return        bool        true if the coordinate is inside the given polygon\n       */\n        isPointInsideWithPreparedPolygon: function(point, coords) {\n\n            var flgPointInside = false,\n            y = this.longitude(point),\n            x = this.latitude(point);\n\n            for(var i = 0, j = coords.length-1; i < coords.length; i++) {\n\n                if ((this.longitude(coords[i]) < y && this.longitude(coords[j]) >=y ||\n                    this.longitude(coords[j]) < y && this.longitude(coords[i]) >= y)) {\n\n                    flgPointInside^=(y*coords[i].multiple+coords[i].constant < x);\n\n                }\n\n                j=i;\n\n            }\n\n            return flgPointInside;\n\n        },\n\n\n        /**\n        * Shortcut for geolib.isPointInside()\n        */\n        isInside: function() {\n            return this.isPointInside.apply(this, arguments);\n        },\n\n\n        /**\n        * Checks whether a point is inside of a circle or not.\n        *\n        * @param        object      coordinate to check (e.g. {latitude: 51.5023, longitude: 7.3815})\n        * @param        object      coordinate of the circle's center (e.g. {latitude: 51.4812, longitude: 7.4025})\n        * @param        integer     maximum radius in meters\n        * @return       bool        true if the coordinate is within the given radius\n        */\n        isPointInCircle: function(latlng, center, radius) {\n            return this.getDistance(latlng, center) < radius;\n        },\n\n\n        /**\n        * Shortcut for geolib.isPointInCircle()\n        */\n        withinRadius: function() {\n            return this.isPointInCircle.apply(this, arguments);\n        },\n\n\n        /**\n        * Gets rhumb line bearing of two points. Find out about the difference between rhumb line and\n        * great circle bearing on Wikipedia. It's quite complicated. Rhumb line should be fine in most cases:\n        *\n        * http://en.wikipedia.org/wiki/Rhumb_line#General_and_mathematical_description\n        *\n        * Function heavily based on Doug Vanderweide's great PHP version (licensed under GPL 3.0)\n        * http://www.dougv.com/2009/07/13/calculating-the-bearing-and-compass-rose-direction-between-two-latitude-longitude-coordinates-in-php/\n        *\n        * @param        object      origin coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n        * @param        object      destination coordinate\n        * @return       integer     calculated bearing\n        */\n        getRhumbLineBearing: function(originLL, destLL) {\n\n            // difference of longitude coords\n            var diffLon = this.longitude(destLL).toRad() - this.longitude(originLL).toRad();\n\n            // difference latitude coords phi\n            var diffPhi = Math.log(\n                Math.tan(\n                    this.latitude(destLL).toRad() / 2 + Geolib.PI_DIV4\n                ) /\n                Math.tan(\n                    this.latitude(originLL).toRad() / 2 + Geolib.PI_DIV4\n                )\n            );\n\n            // recalculate diffLon if it is greater than pi\n            if(Math.abs(diffLon) > Math.PI) {\n                if(diffLon > 0) {\n                    diffLon = (Geolib.PI_X2 - diffLon) * -1;\n                }\n                else {\n                    diffLon = Geolib.PI_X2 + diffLon;\n                }\n            }\n\n            //return the angle, normalized\n            return (Math.atan2(diffLon, diffPhi).toDeg() + 360) % 360;\n\n        },\n\n\n        /**\n        * Gets great circle bearing of two points. See description of getRhumbLineBearing for more information\n        *\n        * @param        object      origin coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n        * @param        object      destination coordinate\n        * @return       integer     calculated bearing\n        */\n        getBearing: function(originLL, destLL) {\n\n            destLL['latitude'] = this.latitude(destLL);\n            destLL['longitude'] = this.longitude(destLL);\n            originLL['latitude'] = this.latitude(originLL);\n            originLL['longitude'] = this.longitude(originLL);\n\n            var bearing = (\n                (\n                    Math.atan2(\n                        Math.sin(\n                            destLL['longitude'].toRad() -\n                            originLL['longitude'].toRad()\n                        ) *\n                        Math.cos(\n                            destLL['latitude'].toRad()\n                        ),\n                        Math.cos(\n                            originLL['latitude'].toRad()\n                        ) *\n                        Math.sin(\n                            destLL['latitude'].toRad()\n                        ) -\n                        Math.sin(\n                            originLL['latitude'].toRad()\n                        ) *\n                        Math.cos(\n                            destLL['latitude'].toRad()\n                        ) *\n                        Math.cos(\n                            destLL['longitude'].toRad() - originLL['longitude'].toRad()\n                        )\n                    )\n                ).toDeg() + 360\n            ) % 360;\n\n            return bearing;\n\n        },\n\n\n        /**\n        * Gets the compass direction from an origin coordinate to a destination coordinate.\n        *\n        * @param        object      origin coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n        * @param        object      destination coordinate\n        * @param        string      Bearing mode. Can be either circle or rhumbline\n        * @return       object      Returns an object with a rough (NESW) and an exact direction (NNE, NE, ENE, E, ESE, etc).\n        */\n        getCompassDirection: function(originLL, destLL, bearingMode) {\n\n            var direction;\n            var bearing;\n\n            if(bearingMode == 'circle') {\n                // use great circle bearing\n                bearing = this.getBearing(originLL, destLL);\n            } else {\n                // default is rhumb line bearing\n                bearing = this.getRhumbLineBearing(originLL, destLL);\n            }\n\n            switch(Math.round(bearing/22.5)) {\n                case 1:\n                    direction = {exact: \"NNE\", rough: \"N\"};\n                    break;\n                case 2:\n                    direction = {exact: \"NE\", rough: \"N\"};\n                    break;\n                case 3:\n                    direction = {exact: \"ENE\", rough: \"E\"};\n                    break;\n                case 4:\n                    direction = {exact: \"E\", rough: \"E\"};\n                    break;\n                case 5:\n                    direction = {exact: \"ESE\", rough: \"E\"};\n                    break;\n                case 6:\n                    direction = {exact: \"SE\", rough: \"E\"};\n                    break;\n                case 7:\n                    direction = {exact: \"SSE\", rough: \"S\"};\n                    break;\n                case 8:\n                    direction = {exact: \"S\", rough: \"S\"};\n                    break;\n                case 9:\n                    direction = {exact: \"SSW\", rough: \"S\"};\n                    break;\n                case 10:\n                    direction = {exact: \"SW\", rough: \"S\"};\n                    break;\n                case 11:\n                    direction = {exact: \"WSW\", rough: \"W\"};\n                    break;\n                case 12:\n                    direction = {exact: \"W\", rough: \"W\"};\n                    break;\n                case 13:\n                    direction = {exact: \"WNW\", rough: \"W\"};\n                    break;\n                case 14:\n                    direction = {exact: \"NW\", rough: \"W\"};\n                    break;\n                case 15:\n                    direction = {exact: \"NNW\", rough: \"N\"};\n                    break;\n                default:\n                    direction = {exact: \"N\", rough: \"N\"};\n            }\n\n            direction['bearing'] = bearing;\n            return direction;\n\n        },\n\n\n        /**\n        * Shortcut for getCompassDirection\n        */\n        getDirection: function(originLL, destLL, bearingMode) {\n            return this.getCompassDirection.apply(this, arguments);\n        },\n\n\n        /**\n        * Sorts an array of coords by distance from a reference coordinate\n        *\n        * @param        object      reference coordinate e.g. {latitude: 51.5023, longitude: 7.3815}\n        * @param        mixed       array or object with coords [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return       array       ordered array\n        */\n        orderByDistance: function(latlng, coords) {\n\n            var coordsArray = [];\n\n            for(var coord in coords) {\n\n                var distance = this.getDistance(latlng, coords[coord]);\n                var augmentedCoord = Object.create(coords[coord]);\n                augmentedCoord.distance = distance;\n                augmentedCoord.key = coord;\n\n                coordsArray.push(augmentedCoord);\n\n            }\n\n            return coordsArray.sort(function(a, b) {\n                return a.distance - b.distance;\n            });\n\n        },\n\n        /**\n        * Check if a point lies in line created by two other points\n        *\n        * @param    object    Point to check: {latitude: 123, longitude: 123}\n        * @param    object    Start of line {latitude: 123, longitude: 123}\n        * @param    object    End of line {latitude: 123, longitude: 123}\n        * @return   boolean\n        */\n        isPointInLine: function(point, start, end) {\n\n            return (this.getDistance(start, point, 1, 3)+this.getDistance(point, end, 1, 3)).toFixed(3)==this.getDistance(start, end, 1, 3);\n        },\n\n                /**\n        * Check if a point lies within a given distance from a line created by two other points\n        *\n        * @param    object    Point to check: {latitude: 123, longitude: 123}\n        * @param    object    Start of line {latitude: 123, longitude: 123}\n        * @param    object    End of line {latitude: 123, longitude: 123}\n        * @pararm   float     maximum distance from line\n        * @return   boolean\n        */\n        isPointNearLine: function(point, start, end, distance) {\n            return this.getDistanceFromLine(point, start, end) < distance;\n        },\n\n                     /**\n        * return the minimum distance from a point to a line\n        *\n        * @param    object    Point away from line\n        * @param    object    Start of line {latitude: 123, longitude: 123}\n        * @param    object    End of line {latitude: 123, longitude: 123}\n        * @return   float     distance from point to line\n        */\n        getDistanceFromLine: function(point, start, end) {\n            var d1 = this.getDistance(start, point, 1, 3);\n            var d2 = this.getDistance(point, end, 1, 3);\n            var d3 = this.getDistance(start, end, 1, 3);\n            var distance = 0;\n\n            // alpha is the angle between the line from start to point, and from start to end //\n            var alpha = Math.acos((d1*d1 + d3*d3 - d2*d2)/(2*d1*d3));\n            // beta is the angle between the line from end to point and from end to start //\n            var beta = Math.acos((d2*d2 + d3*d3 - d1*d1)/(2*d2*d3));\n\n            // if the angle is greater than 90 degrees, then the minimum distance is the\n            // line from the start to the point //\n            if(alpha>Math.PI/2) {\n                distance = d1;\n            }\n            // same for the beta //\n            else if(beta > Math.PI/2) {\n                distance = d2;\n            }\n            // otherwise the minimum distance is achieved through a line perpendular to the start-end line,\n            // which goes from the start-end line to the point //\n            else {\n                distance = Math.sin(alpha) * d1;\n            }\n\n            return distance;\n        },\n\n        /**\n        * Finds the nearest coordinate to a reference coordinate\n        *\n        * @param        object      reference coordinate e.g. {latitude: 51.5023, longitude: 7.3815}\n        * @param        mixed       array or object with coords [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return       array       ordered array\n        */\n        findNearest: function(latlng, coords, offset, limit) {\n\n            offset = offset || 0;\n            limit = limit || 1;\n            var ordered = this.orderByDistance(latlng, coords);\n\n            if(limit === 1) {\n                return ordered[offset];\n            } else {\n                return ordered.splice(offset, limit);\n            }\n\n        },\n\n\n        /**\n        * Calculates the length of a given path\n        *\n        * @param        mixed       array or object with coords [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return       integer     length of the path (in meters)\n        */\n        getPathLength: function(coords) {\n\n            var dist = 0;\n            var last;\n\n            for (var i = 0, l = coords.length; i < l; ++i) {\n                if(last) {\n                    //console.log(coords[i], last, this.getDistance(coords[i], last));\n                    dist += this.getDistance(this.coords(coords[i]), last);\n                }\n                last = this.coords(coords[i]);\n            }\n\n            return dist;\n\n        },\n\n\n        /**\n        * Calculates the speed between to points within a given time span.\n        *\n        * @param        object      coords with javascript timestamp {latitude: 51.5143, longitude: 7.4138, time: 1360231200880}\n        * @param        object      coords with javascript timestamp {latitude: 51.5502, longitude: 7.4323, time: 1360245600460}\n        * @param        object      options (currently \"unit\" is the only option. Default: km(h));\n        * @return       float       speed in unit per hour\n        */\n        getSpeed: function(start, end, options) {\n\n            var unit = options && options.unit || 'km';\n\n            if(unit == 'mph') {\n                unit = 'mi';\n            } else if(unit == 'kmh') {\n                unit = 'km';\n            }\n\n            var distance = geolib.getDistance(start, end);\n            var time = ((end.time*1)/1000) - ((start.time*1)/1000);\n            var mPerHr = (distance/time)*3600;\n            var speed = Math.round(mPerHr * this.measures[unit] * 10000)/10000;\n            return speed;\n\n        },\n\n\n        /**\n         * Computes the destination point given an initial point, a distance\n         * and a bearing\n         *\n         * see http://www.movable-type.co.uk/scripts/latlong.html for the original code\n         *\n         * @param        object     start coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n         * @param        float      longitude of the inital point in degree\n         * @param        float      distance to go from the inital point in meter\n         * @param        float      bearing in degree of the direction to go, e.g. 0 = north, 180 = south\n         * @param        float      optional (in meter), defaults to mean radius of the earth\n         * @return       object     {latitude: destLat (in degree), longitude: destLng (in degree)}\n         */\n        computeDestinationPoint: function(start, distance, bearing, radius) {\n\n            var lat = this.latitude(start);\n            var lng = this.longitude(start);\n\n            radius = (typeof radius === 'undefined') ? this.radius : Number(radius);\n\n            var δ = Number(distance) / radius; // angular distance in radians\n            var θ = Number(bearing).toRad();\n\n            var φ1 = Number(lat).toRad();\n            var λ1 = Number(lng).toRad();\n\n            var φ2 = Math.asin( Math.sin(φ1)*Math.cos(δ) +\n                Math.cos(φ1)*Math.sin(δ)*Math.cos(θ) );\n            var λ2 = λ1 + Math.atan2(Math.sin(θ)*Math.sin(δ)*Math.cos(φ1),\n                    Math.cos(δ)-Math.sin(φ1)*Math.sin(φ2));\n            λ2 = (λ2+3*Math.PI) % (2*Math.PI) - Math.PI; // normalise to -180..+180°\n\n            return {\n                latitude: φ2.toDeg(),\n                longitude: λ2.toDeg()\n            };\n\n        },\n\n\n        /**\n        * Converts a distance from meters to km, mm, cm, mi, ft, in or yd\n        *\n        * @param        string      Format to be converted in\n        * @param        float       Distance in meters\n        * @param        float       Decimal places for rounding (default: 4)\n        * @return       float       Converted distance\n        */\n        convertUnit: function(unit, distance, round) {\n\n            if(distance === 0) {\n\n                return 0;\n\n            } else if(typeof distance === 'undefined') {\n\n                if(this.distance === null) {\n                    throw new Error('No distance was given');\n                } else if(this.distance === 0) {\n                    return 0;\n                } else {\n                    distance = this.distance;\n                }\n\n            }\n\n            unit = unit || 'm';\n            round = (null == round ? 4 : round);\n\n            if(typeof this.measures[unit] !== 'undefined') {\n                return this.round(distance * this.measures[unit], round);\n            } else {\n                throw new Error('Unknown unit for conversion.');\n            }\n\n        },\n\n\n        /**\n        * Checks if a value is in decimal format or, if neccessary, converts to decimal\n        *\n        * @param        mixed       Value(s) to be checked/converted (array of latlng objects, latlng object, sexagesimal string, float)\n        * @return       float       Input data in decimal format\n        */\n        useDecimal: function(value) {\n\n            if(Object.prototype.toString.call(value) === '[object Array]') {\n\n                var geolib = this;\n\n                value = value.map(function(val) {\n\n                    //if(!isNaN(parseFloat(val))) {\n                    if(geolib.isDecimal(val)) {\n\n                        return geolib.useDecimal(val);\n\n                    } else if(typeof val == 'object') {\n\n                        if(geolib.validate(val)) {\n\n                            return geolib.coords(val);\n\n                        } else {\n\n                            for(var prop in val) {\n                                val[prop] = geolib.useDecimal(val[prop]);\n                            }\n\n                            return val;\n\n                        }\n\n                    } else if(geolib.isSexagesimal(val)) {\n\n                        return geolib.sexagesimal2decimal(val);\n\n                    } else {\n\n                        return val;\n\n                    }\n\n                });\n\n                return value;\n\n            } else if(typeof value === 'object' && this.validate(value)) {\n\n                return this.coords(value);\n\n            } else if(typeof value === 'object') {\n\n                for(var prop in value) {\n                    value[prop] = this.useDecimal(value[prop]);\n                }\n\n                return value;\n\n            }\n\n\n            if (this.isDecimal(value)) {\n\n                return parseFloat(value);\n\n            } else if(this.isSexagesimal(value) === true) {\n\n                return parseFloat(this.sexagesimal2decimal(value));\n\n            }\n\n            throw new Error('Unknown format.');\n\n        },\n\n        /**\n        * Converts a decimal coordinate value to sexagesimal format\n        *\n        * @param        float       decimal\n        * @return       string      Sexagesimal value (XX° YY' ZZ\")\n        */\n        decimal2sexagesimal: function(dec) {\n\n            if (dec in this.sexagesimal) {\n                return this.sexagesimal[dec];\n            }\n\n            var tmp = dec.toString().split('.');\n\n            var deg = Math.abs(tmp[0]);\n            var min = ('0.' + (tmp[1] || 0))*60;\n            var sec = min.toString().split('.');\n\n            min = Math.floor(min);\n            sec = (('0.' + (sec[1] || 0)) * 60).toFixed(2);\n\n            this.sexagesimal[dec] = (deg + '° ' + min + \"' \" + sec + '\"');\n\n            return this.sexagesimal[dec];\n\n        },\n\n\n        /**\n        * Converts a sexagesimal coordinate to decimal format\n        *\n        * @param        float       Sexagesimal coordinate\n        * @return       string      Decimal value (XX.XXXXXXXX)\n        */\n        sexagesimal2decimal: function(sexagesimal) {\n\n            if (sexagesimal in this.decimal) {\n                return this.decimal[sexagesimal];\n            }\n\n            var regEx = new RegExp(this.sexagesimalPattern);\n            var data = regEx.exec(sexagesimal);\n            var min = 0, sec = 0;\n\n            if(data) {\n                min = parseFloat(data[2]/60);\n                sec = parseFloat(data[4]/3600) || 0;\n            }\n\n            var dec = ((parseFloat(data[1]) + min + sec)).toFixed(8);\n            //var   dec = ((parseFloat(data[1]) + min + sec));\n\n                // South and West are negative decimals\n                dec = (data[7] == 'S' || data[7] == 'W') ? parseFloat(-dec) : parseFloat(dec);\n                //dec = (data[7] == 'S' || data[7] == 'W') ? -dec : dec;\n\n            this.decimal[sexagesimal] = dec;\n\n            return dec;\n\n        },\n\n\n        /**\n        * Checks if a value is in decimal format\n        *\n        * @param        string      Value to be checked\n        * @return       bool        True if in sexagesimal format\n        */\n        isDecimal: function(value) {\n\n            value = value.toString().replace(/\\s*/, '');\n\n            // looks silly but works as expected\n            // checks if value is in decimal format\n            return (!isNaN(parseFloat(value)) && parseFloat(value) == value);\n\n        },\n\n\n        /**\n        * Checks if a value is in sexagesimal format\n        *\n        * @param        string      Value to be checked\n        * @return       bool        True if in sexagesimal format\n        */\n        isSexagesimal: function(value) {\n\n            value = value.toString().replace(/\\s*/, '');\n\n            return this.sexagesimalPattern.test(value);\n\n        },\n\n        round: function(value, n) {\n            var decPlace = Math.pow(10, n);\n            return Math.round(value * decPlace)/decPlace;\n        }\n\n    });\n\n    // Node module\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\n        module.exports = geolib;\n\n        // react native\n        if (typeof global === 'object') {\n          global.geolib = geolib;\n        }\n\n    // AMD module\n    } else if (typeof define === \"function\" && define.amd) {\n\n        define(\"geolib\", [], function () {\n            return geolib;\n        });\n\n    // we're in a browser\n    } else {\n\n        global.geolib = geolib;\n\n    }\n\n}(this));\n"}